// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proofs.repository;

import com.disid.proofs.domain.CallOption;
import com.disid.proofs.domain.QCallOption;
import com.disid.proofs.repository.CallOptionRepositoryCustom;
import com.disid.proofs.repository.CallOptionRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CallOptionRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CallOptionRepositoryImpl implements CallOptionRepositoryCustom;
    
    declare @type: CallOptionRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CallOptionRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CallOption> CallOptionRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCallOption callOption = QCallOption.callOption;
        
        JPQLQuery<CallOption> query = from(callOption);
        
        Path<?>[] paths = new Path<?>[] {callOption.name};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, callOption.name);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, callOption);
    }
    
}
