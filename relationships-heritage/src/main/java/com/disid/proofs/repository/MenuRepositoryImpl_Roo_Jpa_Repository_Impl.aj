// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proofs.repository;

import com.disid.proofs.domain.CallOption;
import com.disid.proofs.domain.Menu;
import com.disid.proofs.domain.QMenu;
import com.disid.proofs.repository.MenuRepositoryCustom;
import com.disid.proofs.repository.MenuRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect MenuRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: MenuRepositoryImpl implements MenuRepositoryCustom;
    
    declare @type: MenuRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_1 = "option1";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_2 = "option2";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_3 = "option3";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_4 = "option4";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_5 = "option5";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_6 = "option6";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_7 = "option7";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_8 = "option8";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MenuRepositoryImpl.OPTION_9 = "option9";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param callOption
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption1(CallOption option1, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option1, "callOption is required");
        
        query.where(menu.option1.eq(option1));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option2
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption2(CallOption option2, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option2, "option2 is required");
        
        query.where(menu.option2.eq(option2));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option3
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption3(CallOption option3, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option3, "option3 is required");
        
        query.where(menu.option3.eq(option3));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option4
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption4(CallOption option4, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option4, "option4 is required");
        
        query.where(menu.option4.eq(option4));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option5
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption5(CallOption option5, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option5, "option5 is required");
        
        query.where(menu.option5.eq(option5));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option6
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption6(CallOption option6, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option6, "option6 is required");
        
        query.where(menu.option6.eq(option6));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option7
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption7(CallOption option7, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option7, "option7 is required");
        
        query.where(menu.option7.eq(option7));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option8
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption8(CallOption option8, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option8, "option8 is required");
        
        query.where(menu.option8.eq(option8));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param option9
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Menu> MenuRepositoryImpl.findByOption9(CallOption option9, GlobalSearch globalSearch, Pageable pageable) {
        
        QMenu menu = QMenu.menu;
        
        JPQLQuery<Menu> query = from(menu);
        
        Assert.notNull(option9, "option9 is required");
        
        query.where(menu.option9.eq(option9));
        Path<?>[] paths = new Path<?>[] {menu.name,menu.option1,menu.option2,menu.option3,menu.option4,menu.option5,menu.option6,menu.option7,menu.option8,menu.option9};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, menu.name)
			.map(OPTION_1, menu.option1)
			.map(OPTION_2, menu.option2)
			.map(OPTION_3, menu.option3)
			.map(OPTION_4, menu.option4)
			.map(OPTION_5, menu.option5)
			.map(OPTION_6, menu.option6)
			.map(OPTION_7, menu.option7)
			.map(OPTION_8, menu.option8)
			.map(OPTION_9, menu.option9);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, menu);
    }
    
}
