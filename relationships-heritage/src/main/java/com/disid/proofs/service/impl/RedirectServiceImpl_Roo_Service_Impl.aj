// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proofs.service.impl;

import com.disid.proofs.domain.Redirect;
import com.disid.proofs.repository.RedirectRepository;
import com.disid.proofs.service.impl.RedirectServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect RedirectServiceImpl_Roo_Service_Impl {
    
    declare @type: RedirectServiceImpl: @Service;
    
    declare @type: RedirectServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RedirectRepository RedirectServiceImpl.redirectRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param redirectRepository
     */
    @Autowired
    public RedirectServiceImpl.new(RedirectRepository redirectRepository) {
        setRedirectRepository(redirectRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return RedirectRepository
     */
    public RedirectRepository RedirectServiceImpl.getRedirectRepository() {
        return redirectRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param redirectRepository
     */
    public void RedirectServiceImpl.setRedirectRepository(RedirectRepository redirectRepository) {
        this.redirectRepository = redirectRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param redirect
     */
    @Transactional
    public void RedirectServiceImpl.delete(Redirect redirect) {
        getRedirectRepository().delete(redirect);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Redirect> RedirectServiceImpl.save(Iterable<Redirect> entities) {
        return getRedirectRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void RedirectServiceImpl.delete(Iterable<Long> ids) {
        List<Redirect> toDelete = getRedirectRepository().findAll(ids);
        getRedirectRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Redirect
     */
    @Transactional
    public Redirect RedirectServiceImpl.save(Redirect entity) {
        return getRedirectRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Redirect
     */
    public Redirect RedirectServiceImpl.findOne(Long id) {
        return getRedirectRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Redirect
     */
    public Redirect RedirectServiceImpl.findOneForUpdate(Long id) {
        return getRedirectRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Redirect> RedirectServiceImpl.findAll(Iterable<Long> ids) {
        return getRedirectRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Redirect> RedirectServiceImpl.findAll() {
        return getRedirectRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long RedirectServiceImpl.count() {
        return getRedirectRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Redirect> RedirectServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getRedirectRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Redirect> RedirectServiceImpl.getEntityType() {
        return Redirect.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> RedirectServiceImpl.getIdType() {
        return Long.class;
    }
    
}
