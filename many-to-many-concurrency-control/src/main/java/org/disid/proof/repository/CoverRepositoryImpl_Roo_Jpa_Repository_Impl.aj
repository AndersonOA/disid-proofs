// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.disid.proof.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.disid.proof.domain.Cover;
import org.disid.proof.domain.QCover;
import org.disid.proof.repository.CoverRepositoryCustom;
import org.disid.proof.repository.CoverRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CoverRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CoverRepositoryImpl implements CoverRepositoryCustom;
    
    declare @type: CoverRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CoverRepositoryImpl.COVER_URL = "coverUrl";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CoverRepositoryImpl.BOOK = "book";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Cover> CoverRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCover cover = QCover.cover;
        
        JPQLQuery<Cover> query = from(cover);
        
        Path<?>[] paths = new Path<?>[] {cover.coverUrl,cover.book};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(COVER_URL, cover.coverUrl)
			.map(BOOK, cover.book);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, cover);
    }
    
}
