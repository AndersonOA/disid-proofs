// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.disid.proof.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.disid.proof.domain.Author;
import org.disid.proof.domain.Book;
import org.disid.proof.domain.Editorial;
import org.disid.proof.domain.QBook;
import org.disid.proof.repository.BookRepositoryCustom;
import org.disid.proof.repository.BookRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect BookRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: BookRepositoryImpl implements BookRepositoryCustom;
    
    declare @type: BookRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.ISBN = "isbn";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.EDITORIAL = "editorial";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Book> BookRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QBook book = QBook.book;
        
        JPQLQuery<Book> query = from(book);
        
        Path<?>[] paths = new Path<?>[] {book.title,book.isbn,book.editorial};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, book.title)
			.map(ISBN, book.isbn)
			.map(EDITORIAL, book.editorial);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, book);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param authors
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Book> BookRepositoryImpl.findByAuthorsContains(Author authors, GlobalSearch globalSearch, Pageable pageable) {
        
        QBook book = QBook.book;
        
        JPQLQuery<Book> query = from(book);
        
        Assert.notNull(authors, "authors is required");
        
        query.where(book.authors.contains(authors));
        Path<?>[] paths = new Path<?>[] {book.title,book.isbn,book.editorial};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, book.title)
			.map(ISBN, book.isbn)
			.map(EDITORIAL, book.editorial);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, book);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param editorial
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Book> BookRepositoryImpl.findByEditorial(Editorial editorial, GlobalSearch globalSearch, Pageable pageable) {
        
        QBook book = QBook.book;
        
        JPQLQuery<Book> query = from(book);
        
        Assert.notNull(editorial, "editorial is required");
        
        query.where(book.editorial.eq(editorial));
        Path<?>[] paths = new Path<?>[] {book.title,book.isbn,book.editorial};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, book.title)
			.map(ISBN, book.isbn)
			.map(EDITORIAL, book.editorial);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, book);
    }
    
}
