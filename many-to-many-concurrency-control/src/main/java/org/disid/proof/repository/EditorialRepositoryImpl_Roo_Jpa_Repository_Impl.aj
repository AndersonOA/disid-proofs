// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.disid.proof.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.disid.proof.domain.Editorial;
import org.disid.proof.domain.QEditorial;
import org.disid.proof.repository.EditorialRepositoryCustom;
import org.disid.proof.repository.EditorialRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EditorialRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: EditorialRepositoryImpl implements EditorialRepositoryCustom;
    
    declare @type: EditorialRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EditorialRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EditorialRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Editorial> EditorialRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QEditorial editorial = QEditorial.editorial;
        
        JPQLQuery<Editorial> query = from(editorial);
        
        Path<?>[] paths = new Path<?>[] {editorial.name,editorial.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, editorial.name)
			.map(ADDRESS, editorial.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, editorial);
    }
    
}
